import com.gw.buildsrc.dependlibs.GwDependLibs
import com.gw.buildsrc.utils.DataUtils
import com.gw.buildsrc.version.Versions

apply from: "${rootDir.absolutePath}/script/gradle/app_depends.gradle"
apply from: "${rootDir.absolutePath}/script/gradle/reoqoo.gradle"

apply plugin: 'com.sensorsdata.analytics.android'
apply plugin: 'com.google.gms.google-services'

apply from: "${rootDir.absolutePath}/app/common_config.gradle"
apply from: "${rootDir.absolutePath}/app/flavor_config.gradle"

android {
    namespace = "com.gw.reoqoo"
    defaultConfig {
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a"
        }
        buildConfigField("String", "BUILD_NUMBER", "\"$BUILD_NUMBER\"")
        buildConfigField("boolean", "IS_RELEASE_APK", "$IS_RELEASE_APK")
        buildConfigField("boolean", "IS_PROTECTED_APP", "$IS_PROTECTED_APP")
        buildConfigField("boolean", "IS_JENKINS_ENV", "$IS_JENKINS_ENV")
        buildConfigField("String", "BUILD_TIME", "$BUILD_TIME")
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions += "version"
    productFlavors {

        create("google") { flavor ->
            dimension = "version"
            project.ext.flavorConfigs.google.applyToApplication(flavor)
            manifestPlaceholders = [fileProviderAuthority: "${applicationId}"]
            println("applicationId: ${applicationId}")
        }

        create("iptime") { flavor ->
            dimension = "version"
            project.ext.flavorConfigs.iptime.applyToApplication(flavor)
            manifestPlaceholders = [fileProviderAuthority: "${applicationId}"]
            println("applicationId: ${applicationId}")
        }

    }

    applicationVariants.configureEach { variant ->
        def separator = File.separator

        def flavorNameInLowercase = variant.flavorName
        def buildTypeNameInLowercase = variant.buildType.name
        def flavorNameCapitalized = variant.flavorName.capitalize()
        def buildTypeNameCapitalized = variant.buildType.name.capitalize()
        println "flavorNameInLowercase:$flavorNameInLowercase buildTypeNameInLowercase:$buildTypeNameInLowercase"
        def appNamePrefix = project.ext.flavorConfigs[flavorNameInLowercase].APP_NAME_PREFIX
        // apk输出文件名称
        def localApkFileName = "$appNamePrefix${variant.versionName}._code${variant.versionCode}_${DataUtils.getDay()}_db${DB_VERSION}_${BUILD_NUMBER}-${flavorNameInLowercase}-${buildTypeNameInLowercase}.apk"
        variant.outputs.configureEach { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                if ("local" == flavorNameInLowercase || "google" == flavorNameInLowercase) {
                    // 修改打包后的apk文件名
                    outputFileName = localApkFileName
                }
            }
            println "outputFileName = ${outputFileName}"
        }

        // 配置 工件的assemble任务
        def variantAssembleTask = tasks.getByName("assemble${flavorNameCapitalized}${buildTypeNameCapitalized}")
        variantAssembleTask.doLast {
            def apkFileName = localApkFileName
            println "outputApkName = ${apkFileName}"
            // 将 apk文件 复制 到 备份目录 下
            def apkFileOriginalInIntermediates = file("${project.buildDir}${separator}intermediates${separator}apk${separator}${flavorNameInLowercase}${separator}${buildTypeNameInLowercase}${separator}${apkFileName}")
            println "apkFileOriginalInIntermediates = ${apkFileOriginalInIntermediates}"
            def apkFileOriginalInOutputs = file("${project.buildDir}${separator}outputs${separator}apk${separator}${flavorNameInLowercase}${separator}${buildTypeNameInLowercase}${separator}${apkFileName}")
            println "apkFileOriginalInOutputs = ${apkFileOriginalInOutputs}"
            copyApkOrAabAndMapping(variant.versionName, flavorNameInLowercase, buildTypeNameInLowercase, buildTypeNameCapitalized, apkFileOriginalInIntermediates, apkFileOriginalInOutputs)
        }

        // 配置 工件的bundle任务
        def variantBundleTask = tasks.getByName("bundle${flavorNameCapitalized}${buildTypeNameCapitalized}")
        variantBundleTask.doLast {
            def aabFileName = "$appNamePrefix${variant.versionName}._code${variant.versionCode}_${DataUtils.getDay()}_db${DB_VERSION}_${BUILD_NUMBER}-${flavorNameInLowercase}-${buildTypeNameInLowercase}.aab"
            println "aabFileName = ${aabFileName}"
            // 将 apk文件 复制 到 备份目录 下
            def aabFileOriginalInIntermediates = file("${project.buildDir}${separator}intermediates${separator}bundle${separator}${flavorNameInLowercase}${buildTypeNameCapitalized}${separator}${aabFileName}.aab")
            println "aabFileOriginalInIntermediates = ${aabFileOriginalInIntermediates}"
            def aabFileOriginalInOutputs = file("${project.buildDir}${separator}outputs${separator}bundle${separator}${flavorNameInLowercase}${buildTypeNameCapitalized}${separator}${aabFileName}")
            println "aabFileOriginalInOutputs = ${aabFileOriginalInOutputs}"
            copyApkOrAabAndMapping(variant.versionName, flavorNameInLowercase, buildTypeNameInLowercase, buildTypeNameCapitalized, aabFileOriginalInIntermediates, aabFileOriginalInOutputs)
        }
    }

    lintOptions {
        // 打release时, 不进行 lint检查
        checkReleaseBuilds false

        // 代码中 使用了 人为的ID设置 时, 忽略 lint检查
        disable "ResourceType"
        // 编译时 忽略 未翻译字符串资源的报错, 检查 此项时 置 为 true
        abortOnError false
    }

    bundle {
        // storeArchive {
        //     enable = false
        // }
        // todo 暂时先做拆分上架、观察google后台崩溃情况
        abi {
            // 不根据cpu架构拆分
            enableSplit = ENABLE_SPLIT_ABI
        }
        density {
            // 不根据分辨率拆分
            enableSplit = ENABLE_SPLIT_DENSITY
        }
        language {
            // 不根据语言拆分
            enableSplit = ENABLE_SPLIT_LANGUAGE
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 60, 'seconds'
}

dependencies {
    implementation project(":main")
    compileOnly project(":component_modules:component_mine_api")

    compileOnly("${GwDependLibs.GwLibs.DEPEND_LIB_API_COMPONENT}:component_iotapi_plugin_opt_api:${Versions.ReoqooSdkVer.VERSION_CODE}")

    /**
     * 适配Android 15 yooseeKits依赖的一些库而Reoqoo没有的库,需要引入覆盖so库支持16KB
     */
    implementation "com.tencent:mmkv:${Versions.AndroidUtilsVersions.VERSION_MMKV}"
    implementation "com.gwell:gwvideo_beta:${Versions.GwVersions.VERSION_GWVIDEO_BETA}"
    implementation "pl.droidsonroids.gif:android-gif-drawable:${Versions.GwVersions.VERSION_GIF_DRAWABLE}"
}

dependencies {
    implementation "com.google.firebase:firebase-messaging:${Versions.ThirdVersions.VERSION_FIREBASE_MESSAGE}"
    compileOnly "com.jakewharton:process-phoenix:${Versions.ThirdVersions.VERSION_PHONENIX}"
}

kapt {
    correctErrorTypes true
}

/**
 *  这段的逻辑是，当发现渠道里的isGoogle是true的时候，才启用
 *  apply plugin: 'com.google.gms.google-services'
 */
afterEvaluate {
    android.productFlavors.each { flavor ->
        tasks.matching {
            it.name.contains('GoogleServices') && it.name.contains(flavor.name.capitalize())
        }*.enabled = flavor.ext.isGoogle
    }
}