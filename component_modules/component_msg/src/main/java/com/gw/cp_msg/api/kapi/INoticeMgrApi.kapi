package com.gw.cp_msg.api.kapi

import com.gw.cp_msg.entity.http.BannerEntity
import com.gw.cp_msg.entity.http.MainNoticeEntity

/**
 * Author: yanzheng@gwell.cc
 * Time: 2023/12/14 16:00
 * Description: NoticeMgrApi
 */
interface INoticeMgrApi {

    /**
     * 请求 公告消息, 成功 后 再 请求 用户消息.
     * 几个时机:
     * 1) 一个是: app启动后 或 登陆成功后;
     * 2) 一个是: 当 收到 topic为"SaasUserMsg.Update"的推送消息 时, 也会 触发 执行 这个函数.
     * @param fromPush Boolean  是不是 由 topic为"SaasUserMsg.Update"的推送消息 触发的
     */
    suspend fun requestMsg(fromPush: Boolean)

    /**
     * 清掉 缓存的消息.
     * 当 登陆成功 后, 会 执行 这个函数.
     */
    fun clearMessage()

    /**
     * 获取 缓存的主页消息列表 中的 第1个主页消息.
     * @return MainNotice?
     */
    fun getMainNotice(): MainNoticeEntity?

    /**
     * 获取 推送级别的主页消息列表 中的 第1个主页消息.
     * 这种消息 必然 是 用户消息.
     * 这种消息 是: 由于 收到 topic为"SaasUserMsg.Update"的推送消息 而 拉取的 用户消息.
     * @return MainNotice?
     */
    fun getPushMainNotice(): MainNoticeEntity?

    /**
     * 从 主页消息列表 中 删除 指定的主页消息
     * @param mainNoticeEntity MainNotice
     * @return Boolean
     */
    fun deleteMainNotice(mainNoticeEntity: MainNoticeEntity): Boolean

//    /**
//     * 从 免费七天云服务试用消息列表 中 取得 第1个免费七天云服务试用消息
//     * @param deviceId String
//     * @return NewDevFreeReceiveInfo?
//     */
//    fun getNewDevFreeReceiveInfo(deviceId: String): NewDevFreeReceiveInfo?

//    /**
//     * 从 免费七天云服务试用消息列表 中 删除 指定的免费七天云服务试用消息
//     * @param deviceId String
//     * @return NewDevFreeReceiveInfo?
//     */
//    fun deleteNewDevFreeReceiveInfo(deviceId: String): NewDevFreeReceiveInfo?

    /**
     * 获取 增值业务灰度值
     * @return String?
     */
    fun getVasGrayLevel(): String?

    /**
     * 获取 帮助中心灰度值
     * @return String?
     */
    fun getHelpServerUrl(): String?

    /**
     * 获取 自营4G灰度
     * @return String?
     */
    fun getFourCardGrayLevel(): String?

    /**
     * 获取 积分首页灰度值
     * @return String?
     */
    fun getIntegralHomeGrayLevel(): String?

    /**
     * 获取 首页banner数据
     * @return SystemMessage.Data.Banner?
     */
    fun getHomeBanner(): BannerEntity?

    /**
     * 获取 我的界面banner数据
     * @return SystemMessage.Data.Banner?
     */
    fun getMyBanner(): BannerEntity?

    /**
     * 获取 首页需要展示在头部的活动
     * @return SystemMessage.Data.Banner?
     */
    fun getMainHeadBanner(): BannerEntity?

    /**
     * 获取 设备列表页悬浮窗banner
     * @return SystemMessage.Data.Banner?
     */
    fun getFloatBanner(): BannerEntity?


    /**
     * 设置 用户消息的 状态
     *
     * @param msgId Long 消息ID
     * @param state Int  已读状态(0: 未读, 1: 已读)
     * @return Boolean   是否成功
     */
    suspend fun setUserMessageState(msgId: Long, state: Int): Boolean?

    /**
     * 设置 系统消息的 状态
     *
     * @param tag Long  系统消息的tag
     * @param state Int  已读状态(0: 未读, 1: 已读)
     * @return Boolean   是否成功
     */
    suspend fun setNoticeState(tag: String, state: Int): Boolean?

}