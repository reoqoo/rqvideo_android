package com.gw.cp_msg.entity.http

import com.squareup.moshi.Json

/**
 * Author: yanzheng@gwell.cc
 * Time: 2023/12/12 10:47
 * Description: NoticeDataEntity
 */
data class NoticeDataEntity(

    /**
     * "data":{
     * "h5ver":[
     * {"tag":"VasHome","url":"https://www.baidu.com/灰度版本"},
     * {"tag":"HelpHome","url":"https://www.baidu.com/帮助中心正式版本"},
     * {"tag":"AppUpgrade","url":"https://app更新说明/正式版本"}
     * ],
     * "notice":[
     * {"tag":"notice#test.210519","url":"www.baidu.com","iconUrl":"","title":"title","showOpt":0}
     * ],
     * "banner":[
     * {"tag":"MY","url":"www.baidu.com","picUrl":"xxx"}
     * ]}
     */

    /**
     * H5页面版本. 简单说, 就是 关于 h5灰度 的 功能.
     */
    @Json(name = "h5ver")
    val h5DoMains: List<H5DoMainEntity>? = null,

    /**
     * 公告列表
     */
    @Json(name = "notice")
    val noticeEntities: List<NoticeEntity>? = null,

    /**
     * banner(包含icon与悬浮窗)列表
     */
    @Json(name = "banner")
    val banners: List<BannerEntity>? = null
)

/**
 * 灰度.
 * 说明：接口只返回域名后的地址，app需要拼接，拼接格式 https://domain+url	.
 * 注:后端服务或者接口异常可能出现异常，app端本地需要保存各个模块的默认地址
 */
data class H5DoMainEntity(
    /**
     * 标签,唯一性标识.
     * 用于区分当前属于哪个地址的灰度.
     */
    @Json(name = "tag")
    val tag: String? = null,

    /**
     * H5页面.
     * 简单说, 就是 灰度值
     */
    @Json(name = "url")
    val url: String? = null,
)

data class NoticeEntity(
    /**
     * 标签,唯一性标识
     * 用于区分是什么弹窗
     */
    @Json(name = "tag")
    var tag: String? = null,
    /**
     * 公告展示的Url页面.
     * 即, 弹窗地址.
     */
    @Json(name = "url")
    val url: String? = null,

    /**
     * 图标Url，活动公告需要（已弃用）.
     * 首页活动的icon
     */
    @Json(name = "iconUrl")
    val iconUrl: String? = null,

    /**
     * 标题(可在公告列表中展示)
     */
    @Json(name = "title")
    val title: String? = null,

    /**
     * 显示选项,0表示不弹窗，1表示在首页弹窗，2表示在设备监控页面弹窗，3表示在智能守护页面弹窗，4表示在我的页面弹窗.
     * 在什么界面展示.
     * 参见 [ShowOptType]
     */
    @Json(name = "showOpt")
    val showOpt: Int = 0,

    /**
     * 本地数据，用于区分是否展示过
     */
    val isHaveShow: Boolean = false,
)

data class BannerEntity(
    /**
     * 标签,唯一性标识
     * 用于区分是什么弹窗
     * 参见 [BannerTag]
     */
    @Json(name = "tag")
    val tag: String? = null,
    /**
     * 公告展示的Url页面.
     * 即, 弹窗地址.
     */
    @Json(name = "url")
    val url: String? = null,

    /**
     * 图标Url，活动公告需要（已弃用）
     */
    @Json(name = "picUrl")
    val picUrl: String? = null,
) : Comparable<BannerEntity> {
    override fun compareTo(other: BannerEntity): Int {
        return if (tag == other.tag &&
            url == other.url &&
            picUrl == other.picUrl
        ) {
            0
        } else {
            -1
        }
    }

}

enum class ShowOptType(val type: Int) {
    /**
     * 不展示通知弹窗
     */
    TYPE_NOT_SHOW_DIALOG(0),

    /**
     * 首页展示通知弹窗
     */
    TYPE_HOME_SHOW_DIALOG(1),

    /**
     * 监控页展示弹窗
     */
    TYPE_MONITOR_SHOW_DIALOG(2),

    /**
     * 智能守护页展示弹窗
     */
    TYPE_KEYBOARD_SHOW_DIALOG(3),

    /**
     * 个人中心展示弹窗
     */
    TYPE_MY_SHOW_DIALOG(4),
}

enum class NoticeTag(val tag: String) {
    /**
     * App升级
     */
    TAG_APP_UPGRADE("AppUpgrade"),

    /**
     * 公告
     */
    TAG_SYS_MAINTANCE("SysMaintance"),

    /**
     * 提示
     */
    TAG_RENEW_TIPS("RenewTips"),

    /**
     * 活动
     */
    TAG_PROMOTION("Promotion"),

    /**
     * 设备升级
     */
    TAG_DEVICE_UPGRADE("DeviceUpgrade"),
}

/**
 * banner tag值
 */
enum class BannerTag(val tag: String) {
    /**
     * 主页banner
     */
    BANNER_HOME("Home"),

    /**
     * 我的界面banner
     */
    BANNER_MY("My"),

    /**
     * 增值业务banner
     */
    BANNER_VAS_HOME("VasHome"),

    /**
     * 首页最上方的banner
     */
    BANNER_HOME_TOP("icon"),

    /**
     * 首页悬浮窗按钮
     */
    BANNER_FLOAT_ICON("floating-icon"),
}

