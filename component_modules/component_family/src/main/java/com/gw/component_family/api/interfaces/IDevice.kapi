package com.gw.component_family.api.interfaces

import android.os.Bundle
import androidx.core.os.bundleOf


/**
 * @Description: - 向外提供操作的设备
 * @Author: XIAOLEI
 * @Date: 2023/7/31
 */
interface IDevice {
    companion object {
        /**
         * 在线状态
         * 0 离线
         */
        private val STATUS_OFFLINE = 0

        /**
         * 1 在线
         */
        private val STATUS_ONLINE = 1

        /**
         * 2 休眠
         */
        private val STATUS_HIBERNATE = 2

        const val DEVICEID_KEY = "deviceId"
        const val USERID_KEY = "userId"
        const val REMARKNAME_KEY = "remarkName"
        const val RELATION_KEY = "relation"
        const val PERMISSION_KEY = "permission"
        const val MODIFYTIME_KEY = "modifyTime"
        const val ISMASTER_KEY = "isMaster"
        const val ONLINE_KEY = "online"
        const val POWERON_KEY = "powerOn"
        const val PRODUCTID_KEY = "productId"
        const val SN_KEY = "sn"
        const val HASSHARED_KEY = "hasShared"
        const val ORIGINJSON_KEY = "originJson"
        const val TOSTRING_KEY = "toString"
    }

    /**
     * 设备ID
     */
    val deviceId: String

    /**
     * 设备所属的用户ID
     */
    val userId: String

    /**
     * 设备备注名称
     */
    val remarkName: String?

    /**
     * iot设备独有字段  1---主人   3---访客
     */
    val relation: Int

    /**
     *
     * t设备的这个字段 来自于 SaasDevice.permission 字段;
     *          V-permission: 8字节，不同bit位代表不同权限开启状态（0：关闭，1：开启）.
     *                  历史app添加设备permission默认传3，为兼容历史App版本，权限从bit2 位开始定义.
     *                  定义如下：
     *                          bit0: 保留. 0: 旧的权限管理 是 关闭状态; 1: 旧的权限管理 是 开启状态
     *                                  旧的权限管理:
     *                                          没有云回放权限.
     *                                          其它权限都有.
     *                          bit1: 当前用户是否是设备主人，1：主人，0：访客
     *                          bit2: 是否开启权限管理，0-未开启（历史版本），1-已开启
     *                          bit3: 是否已经设备复位，0-未复位，1-已复位（此位由云端控制，终端绑定、分享时只能置0）
     *                          bit4: 是否开启查看摄像机画面权限（实时监控，默认共享），0-未开启，1-开启
     *                          bit5: 是否开启操控摄像机权限（云台、对讲等），0-未开启，1-开启
     *                          bit6: 是否开启查看摄像机产生内容权限（云/卡回放、智能守护，设备消息），0-未开启，1-开启
     *
     */
    val permission: Int

    /**
     * 客户端本地修改时的UTC时间戳
     */
    val modifyTime: String

    /**
     * 是不是设备的主人
     */
    val isMaster: Boolean

    /**
     * 在线状态
     * 0 离线
     * 1 在线
     * 2 休眠
     */
    val online: Int?

    /**
     * 是否离线
     */
    val isOffline: Boolean get() = online == STATUS_OFFLINE

    /**
     * 是否在线
     */
    val isOnline: Boolean get() = online == STATUS_ONLINE

    /**
     * 是否休眠
     */
    val isHibernate: Boolean get() = online == STATUS_HIBERNATE

    /**
     * 开机状态
     */
    val powerOn: Boolean?

    /**
     * 产品ID
     */
    val productId: String?

    /**
     * 设备SN码
     */
    val sn: String?

    /**
     * 是否有发生分享，针对主人设备
     */
    val hasShared: Boolean?

    /**
     * 设备信息原始json，仅用于H5 session中的deviceList 中，其他场景场景勿用
     */
    val originJson: String?

    override fun toString(): String

    fun toBundle() = bundleOf(
        DEVICEID_KEY to deviceId,
        USERID_KEY to userId,
        REMARKNAME_KEY to remarkName,
        RELATION_KEY to relation,
        PERMISSION_KEY to permission,
        MODIFYTIME_KEY to modifyTime,
        ISMASTER_KEY to isMaster,
        ONLINE_KEY to online,
        POWERON_KEY to powerOn,
        PRODUCTID_KEY to productId,
        SN_KEY to sn,
        HASSHARED_KEY to hasShared,
        ORIGINJSON_KEY to originJson,
        TOSTRING_KEY to toString(),
    )
}

/**
 * 用来实现Bundle转IDevice的类
 */
data class BundleDevice(private val bundle: Bundle?) : IDevice {
    override val deviceId: String get() = bundle?.getString(IDevice.DEVICEID_KEY) ?: ""
    override val userId: String get() = bundle?.getString(IDevice.USERID_KEY) ?: ""
    override val remarkName: String? get() = bundle?.getString(IDevice.REMARKNAME_KEY)
    override val relation: Int get() = bundle?.getInt(IDevice.RELATION_KEY) ?: 0
    override val permission: Int get() = bundle?.getInt(IDevice.PERMISSION_KEY) ?: 0
    override val modifyTime: String get() = bundle?.getString(IDevice.MODIFYTIME_KEY) ?: ""
    override val isMaster: Boolean get() = bundle?.getBoolean(IDevice.ISMASTER_KEY) ?: false
    override val online: Int? get() = bundle?.getInt(IDevice.ONLINE_KEY)
    override val powerOn: Boolean? get() = bundle?.getBoolean(IDevice.POWERON_KEY)
    override val productId: String? get() = bundle?.getString(IDevice.PRODUCTID_KEY)
    override val sn: String? get() = bundle?.getString(IDevice.SN_KEY)
    override val hasShared: Boolean? get() = bundle?.getBoolean(IDevice.HASSHARED_KEY)
    override val originJson: String? get() = bundle?.getString(IDevice.ORIGINJSON_KEY)
    override fun toString() = bundle?.getString(IDevice.TOSTRING_KEY) ?: ""
}
